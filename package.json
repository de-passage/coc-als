{
    "name": "coc-als",
    "version": "0.1.0",
    "description": "Ada Language Server support for coc.nvim",
    "author": "Sylvain Leclercq <contact@sylvainleclercq.com>",
    "license": "MIT",
    "main": "lib/index.js",
    "keywords": [
        "coc.nvim",
        "Ada",
        "languageserver",
        "LSP",
        "ada_language_server",
        ""
    ],
    "engines": {
        "coc": ">=0.0.80"
    },
    "scripts": {
        "lint": "eslint src --ext ts",
        "clean": "rimraf lib",
        "watch": "node esbuild.js --watch",
        "build": "node esbuild.js",
        "prepare": "node esbuild.js"
    },
    "prettier": {
        "singleQuote": true,
        "printWidth": 120,
        "semi": true
    },
    "devDependencies": {
        "@types/node": "^16.10.3",
        "@typescript-eslint/eslint-plugin": "^4.8.2",
        "@typescript-eslint/parser": "^4.8.2",
        "coc.nvim": "^0.0.80",
        "esbuild": "^0.8.42",
        "eslint": "^7.14.0",
        "eslint-config-prettier": "^8.1.0",
        "eslint-plugin-prettier": "^3.1.4",
        "prettier": "^2.2.0",
        "rimraf": "^3.0.2",
        "typescript": "^4.1.2"
    },
    "activationEvents": [
        "onLanguage:ada"
    ],
    "contributes": {
        "snippets": [
            {
                "language": "ada",
                "path": "./ada-snippets.json"
            },
            {
                "language": "gpr",
                "path": "./gpr-snippets.json"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Ada configuration",
            "properties": {
                "ada.serverBin": {
                  "type":"string",
                  "default": "ada_language_server",
                  "description": "The name of the language server"
                },
                "ada.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable coc-als extension"
                },
                "ada.trace.server": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Traces the communication between CoC.nvim and the language server."
                },
                "ada.projectFile": {
                    "scope": "resource",
                    "type": "string",
                    "default": "",
                    "description": "Project file (*.gpr) for given workspace. This is required if there isn't exactly one project file in the root directory of the workspace."
                },
                "ada.scenarioVariables": {
                    "scope": "resource",
                    "type": "object",
                    "default": {},
                    "description": "Scenario variables."
                },
                "ada.defaultCharset": {
                    "scope": "resource",
                    "type": "string",
                    "default": "iso-8859-1",
                    "description": "The character set to use while reading files from disk."
                },
                "ada.displayMethodAncestryOnNavigation": {
                    "scope": "resource",
                    "type": "string",
                    "enum": [
                        "never",
                        "usage_and_abstract_only",
                        "definition_only",
                        "always"
                    ],
                    "enumDescriptions": [
                        "Never list overridding and/or overridden suprograms.",
                        "List overridding and/or overridden suprograms on dispatching calls and on abstract subprogram declarations.",
                        "List overridding and/or overridden suprograms on declarations only.",
                        "Always list overridding and/or overridden suprograms when possible."
                    ],
                    "default": "usage_and_abstract_only",
                    "description": "Controls the policy for displaying overriding and overridden subprograms on navigation requests such as 'Go To Definition' or 'Go To Implementations'."
                },
                "ada.enableDiagnostics": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "description": "Enable the emission of diagnostics."
                },
                "ada.renameInComments": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": false,
                    "description": "Enable editing Ada comments while executing `textDocument/rename` request."
                }
            }
        },
        "commands": [
            {
                "command": "ada.otherFile",
                "title": "Switch between specification and file"
            },
            {
                "command": "ada.calledBy",
                "title": "Calls the method 'textDocument/alsCalledBy' of ALS and populate the location list with the results"
            },
            {
                "command": "ada.calls",
                "title": "Calls the method 'textDocument/alsCalls' of ALS and populate the location list with the results"
            }
        ]
    },
    "dependencies": {
        "fs": "^0.0.1-security",
        "process": "^0.11.10",
        "vscode-languageserver-protocol": "^3.16.0"
    }
}
